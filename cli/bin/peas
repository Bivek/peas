#!/usr/bin/env ruby
require 'gli'
require 'peas'

include GLI::App
reset # Used when this file is repetitively loaded by rspec

@git = Git.new
@api = API.new

program_desc 'CLI client for Peas'

version Peas::VERSION

desc 'Create an app'
command :create do |c|
  c.action do |global_options,options,args|
    @api.request :post, :create, {
      first_sha: @git.first_sha,
      remote: @git.remote
    }
  end
end

desc 'Deploy an app'
command :deploy do |c|
  c.action do |global_options,options,args|
    @api.request :get, :deploy, {first_sha: @git.first_sha}
  end
end

desc 'Scale an app'
long_desc <<-EOF
For example: peas scale web=3 worker=2
EOF
command :scale do |c|
  c.action do |global_options,options,args|
    if args.length == 0
      exit_now! "Please provide scaling arguments in the form: web=3 worker=2"
    end
    scaling_hash = {}
    args.each do |arg|
      parts = arg.split('=')
      process_type = parts[0]
      quantity = parts[1]
      scaling_hash[process_type] = quantity
    end
    @api.request :put, :scale, {
      first_sha: @git.first_sha,
      scaling_hash: scaling_hash.to_json
    }
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit_status = run(ARGV)
exit exit_status if ENV['GLI_ENV'] != 'test'
